{
  "array_func": {
    "prefix": [
      "anfn"
    ],
    "description": "($1) => { $2 }",
    "body": [
      "($1) => { $2 }"
    ]
  },
  "commonjs_exec_exe_file": {
    "prefix": [
      "exe"
    ],
    "description": "\nconst { execFile } = require(\"child_process\");\nconst command = `$1.exe`\nexec(command, function (err, data) {\n  console.log(err);\n  console.log(data.toString());\n});\n",
    "body": [
      "const { execFile } = require(\"child_process\");",
      "const command = `$1.exe`",
      "exec(command, function (err, data) {",
      "  console.log(err);",
      "  console.log(data.toString());",
      "});"
    ]
  },
  "commonjs_exec": {
    "prefix": [
      "exec"
    ],
    "description": "\nconst { exec } = require(\"child_process\");\nconst command = `$1`\nexec(command, (err, stdout, stderr) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  console.log(stdout);\n});\n",
    "body": [
      "const { exec } = require(\"child_process\");",
      "const command = `$1`",
      "exec(command, (err, stdout, stderr) => {",
      "  if (err) {",
      "    console.error(err);",
      "    return;",
      "  }",
      "  console.log(stdout);",
      "});"
    ]
  },
  "commonjs_spawn": {
    "prefix": [
      "spawnexe"
    ],
    "description": "\nconst { spawn } = require(\"child_process\");\nconst [command,...args] = `$1`.split(\" \");\nconst child = spawn(command,args,{stdio:\"inherit\"});\nchild.stdout.on('data', (data) => {\n  console.log(data.toString());\n});\n\nchild.stderr.on('data', (data) => {\n  console.error(data.toString());\n});\n\nchild.on('exit', (code) => {\n  console.log(`Child exited with code ${code}`);\n});\nchild.on(\"error\", (err) => {})\nchild.on(\"close\", () => {})\n",
    "body": [
      "const { spawn } = require(\"child_process\");",
      "const [command,...args] = `$1`.split(\" \");",
      "const child = spawn(command,args,{stdio:\"inherit\"});",
      "child.stdout.on('data', (data) => {",
      "  console.log(data.toString());",
      "});",
      "",
      "child.stderr.on('data', (data) => {",
      "  console.error(data.toString());",
      "});",
      "",
      "child.on('exit', (code) => {",
      "  console.log(`Child exited with code ${code}`);",
      "});",
      "child.on(\"error\", (err) => {})",
      "child.on(\"close\", () => {})"
    ]
  },
  "console_log": {
    "prefix": [
      "csl",
      "logg"
    ],
    "description": "console.log(*)",
    "body": [
      "console.log(`$1`,$1)"
    ]
  },
  "date_version": {
    "prefix": [
      "!tv"
    ],
    "body": [
      "\"$CURRENT_YEAR.$CURRENT_MONTH.$CURRENT_DATE\""
    ],
    "description": "今天日期"
  },
  "esmodule__dirname": {
    "prefix": [
      "!dirname"
    ],
    "description": "import { fileURLToPath } from 'url';\nimport { dirname } from 'path';\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);",
    "body": [
      "import { fileURLToPath } from 'url';",
      "import { dirname } from 'path';",
      "const __filename = fileURLToPath(import.meta.url);",
      "const __dirname = dirname(__filename);"
    ]
  },
  "esmodule__filename": {
    "prefix": [
      "!filename"
    ],
    "description": "import { fileURLToPath } from 'url';\nimport { dirname } from 'path';\nconst __filename = fileURLToPath(import.meta.url);",
    "body": [
      "import { fileURLToPath } from 'url';",
      "import { dirname } from 'path';",
      "const __filename = fileURLToPath(import.meta.url);"
    ]
  },
  "file_header": {
    "prefix": [
      "!fh"
    ],
    "description": "\n/**\n * @author \n * @file \n * @desc $1\n * @todo\n * \n * @done\n * @example\n */\n",
    "origin": "\n/**\n * @author \n * @file \n * @desc $1\n * @todo\n * \n * @done\n * @example\n */\n",
    "body": [
      "/**",
      " * @author ",
      " * @file ",
      " * @desc $1",
      " * @todo",
      " * ",
      " * @done",
      " * @example",
      " */"
    ]
  },
  "method_header": {
    "prefix": [
      "!mh"
    ],
    "description": "\n/**\n * @method $1\n * @param {} \n * @returns {}\n * @desc $2\n * @example\n */\n",
    "body": [
      "/**",
      " * @method $1",
      " * @param {} ",
      " * @returns {}",
      " * @desc $2",
      " * @example",
      " */"
    ]
  },
  "now": {
    "prefix": [
      "now",
      "!now"
    ],
    "body": [
      "\"$CURRENT_YEAR年$CURRENT_MONTH月$CURRENT_DATE日 $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND\""
    ],
    "description": "当前时间"
  },
  "object_entries_foreach": {
    "prefix": [
      "oef"
    ],
    "description": "Object.entries(options).forEach(([key,value])=>{\n$1\n}",
    "body": [
      "Object.entries(options).forEach(([key,value])=>{",
      "$1",
      "}"
    ]
  },
  "one_line_comment_close": {
    "prefix": [
      "//",
      "ccc"
    ],
    "description": "/** ******  ****** */",
    "body": [
      "${BLOCK_COMMENT_START}* ****** $1 ****** ${BLOCK_COMMENT_END}"
    ]
  },
  "one_line_comment": {
    "prefix": [
      "///"
    ],
    "description": "\n${LINE_COMMENT} ****** $1 ******\n",
    "body": [
      "${LINE_COMMENT} ****** $1 ******"
    ]
  },
  "promise": {
    "prefix": [
      "!promise"
    ],
    "description": "\nnew Promise((resolve,reject)=>{\n  $1\n})\n",
    "body": [
      "new Promise((resolve,reject)=>{",
      "  $1",
      "})"
    ]
  },
  "react_flat_list": {
    "prefix": [
      "!flatlist"
    ],
    "description": "react_flat_list",
    "body": [
      "(",
      "  <FlatList",
      "      data={$data}",
      "      keyExtractor={(item, index) => index}",
      "      renderItem={({ item }) => (",
      "        <>",
      "          $2",
      "        </>",
      "      )}",
      "    />",
      ")"
    ]
  },
  "try_catch": {
    "prefix": [
      "trycc"
    ],
    "description": "try{\n  $1\n}catch(err){\n  $2\n}",
    "body": [
      "try{",
      "  $1",
      "}catch(err){",
      "  $2",
      "}"
    ]
  },
  "var_comment": {
    "prefix": [
      "!vh"
    ],
    "description": "\n/**\n * @var $1  \n * @desc $变量定义\n * @property {string} $2 $变量名\n * \n */\n",
    "body": [
      "/**",
      " * @var $1  ",
      " * @desc $变量定义",
      " * @property {string} $2 $变量名",
      " * ",
      " */"
    ]
  },
  "vue2_component": {
    "prefix": [
      "!vue2"
    ],
    "description": "vue2",
    "body": [
      "",
      "<!--",
      "* @FileDescription: ${1:该文件的描述信息}",
      "* @Date: $CURRENT_YEAR年$CURRENT_MONTH月$CURRENT_DATE日 $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
      "* TODO:",
      "* [] ${2}",
      "-->",
      "",
      "<template>",
      "  <div>",
      "  </div>",
      "</template>",
      "",
      "<script>",
      "export default {",
      "  // 组件名",
      "  name: '${2:Demo}',",
      "  components: {},",
      "  // filters:{},",
      "  // mixins:[],",
      "  // props: {},",
      "  data(){",
      "    return{",
      "      ",
      "    }",
      "  },",
      "  // 组件方法",
      "  // computed:{},",
      "  // watch:{},",
      "  // created(){},",
      "  methods: {},",
      "}",
      "</script> ",
      "",
      "<style lang=\"scss\" scoped>",
      "",
      "</style>",
      ""
    ]
  },
  "vue2_mixin": {
    "prefix": [
      "oef"
    ],
    "description": "export default {\n  // 组件名\n  components: {},\n  // filters:{},\n  // mixins:[],\n  // props: {},\n  // data(){\n  //   return{\n  //     \n  //   }\n  // },\n  // 组件方法\n  // computed:{},\n  // watch:{},\n  // mounted(){},\n  methods: {},\n}",
    "body": [
      "export default {",
      "  // 组件名",
      "  components: {},",
      "  // filters:{},",
      "  // mixins:[],",
      "  // props: {},",
      "  // data(){",
      "  //   return{",
      "  //     ",
      "  //   }",
      "  // },",
      "  // 组件方法",
      "  // computed:{},",
      "  // watch:{},",
      "  // mounted(){},",
      "  methods: {},",
      "}"
    ]
  },
  "zx": {
    "prefix": [
      "!zx"
    ],
    "description": "\n#!/usr/bin/env zx\n/**\n * 功能: $1\n * \n */ \nawait $``\n",
    "body": [
      "#!/usr/bin/env zx",
      "/**",
      " * 功能: $1",
      " * ",
      " */ ",
      "await $``"
    ]
  }
}